function use_gcc_colors() {
    # colored GCC warnings and errors
    export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"
}

function customize_prompt() {
    # Bash/Prompt customization
    # https://wiki.archlinux.org/index.php/Bash/Prompt_customization
    #
    # How to Customize (and Colorize) Your Bash Prompt
    # https://www.howtogeek.com/307701/how-to-customize-and-colorize-your-bash-prompt/
    #
    # Terminal prompt not wrapping correctly
    # https://unix.stackexchange.com/questions/105958/terminal-prompt-not-wrapping-correctly/447520#447520

    local -r BLACK="\001$(tput setaf 0)\002"
    local -r RED="\001$(tput setaf 1)\002"
    local -r GREEN="\001$(tput setaf 2)\002"
    local -r YELLOW="\001$(tput setaf 3)\002"
    local -r BLUE="\001$(tput setaf 4)\002"
    local -r MAGENTA="\001$(tput setaf 5)\002"
    local -r CYAN="\001$(tput setaf 6)\002"
    local -r WHITE="\001$(tput setaf 7)\002"
    local -r DEFAULT_COLOR="\001$(tput sgr0)\001"

    PS1="${GREEN}\$(git rev-parse --abbrev-ref HEAD 2> /dev/null || echo '\u@\h')${DEFAULT_COLOR} ${YELLOW}\w${DEFAULT_COLOR}\n\$ "

    PROMPT_COMMAND="RETURN_CODE=\${?} ; if [ \${RETURN_CODE} -ne 0 ] ; then echo -en \"${RED}{ \${RETURN_CODE} }${DEFAULT_COLOR} \" ; else echo -n \"\" ; fi"

    unset -f esc bash_esc
}

function define_environment_variables() {
    # Environment variables
    # https://wiki.archlinux.org/index.php/Environment_variables
    #
    # Default programs
    #
    #   EDITOR  Contains the command to run the lightweight program used for editing files,
    #           e.g., /usr/bin/nano.
    #
    #   VISUAL  Contains command to run the full-fledged editor that is used for more demanding
    #           tasks, such as editing mail (e.g., vi, vim, emacs etc).
    #
    #   PAGER   Contains command to run the program used to list the contents of files,
    #           e.g., /bin/less.
    #
    export EDITOR="vim"
    export VISUAL="${EDITOR}"

    local -r MOST="most"

    # Only set PAGER if we have access to `most`.
    if hash "${MOST}" 2> /dev/null ; then
        export PAGER="${MOST}"
    fi

    export MONO_SRC=/home/dev/src/mono
}

function source_the_sdk() {
    local -r SCRIPT=${1}

    if [ -f "${SCRIPT}" ] ; then
        source "${SCRIPT}"
    fi
}

function main() {
    use_gcc_colors
    customize_prompt
    define_environment_variables

    # release-2.19 and later
    source_the_sdk /opt/poky/4.0.10/environment-setup-armv7at2hf-neon-poky-linux-gnueabi

    # release-2.18 and earlier
    source_the_sdk /opt/poky/2.4.2/environment-setup-cortexa8hf-neon-poky-linux-gnueabi
}

main
ssh -T git@github.com
cd ~/src/mono
